"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from neon_api.models import operations, shared
from typing import Optional

class Project:
    r"""These methods allow you to create and manage Neon projects. For related information, see [Manage projects](https://neon.tech/docs/manage/projects)."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def create_project(self, request: shared.ProjectCreateRequest) -> operations.CreateProjectResponse:
        r"""Create a project
        Creates a Neon project.
        A project is the top-level object in the Neon object hierarchy.
        Plan limits define how many projects you can create.
        Neon's Free plan permits one project per Neon account.
        For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
        
        You can specify a region and PostgreSQL version in the request body.
        Neon currently supports PostgreSQL 14 and 15.
        For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/projects'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateProject201ApplicationJSON])
                res.create_project_201_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def delete_project(self, request: operations.DeleteProjectRequest) -> operations.DeleteProjectResponse:
        r"""Delete a project
        Deletes the specified project.
        You can obtain a `project_id` by listing the projects for your Neon account.
        Deleting a project is a permanent action.
        Deleting a project also deletes endpoints, branches, databases, and users that belong to the project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteProjectRequest, base_url, '/projects/{project_id}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectResponse])
                res.project_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def get_project(self, request: operations.GetProjectRequest) -> operations.GetProjectResponse:
        r"""Get project details
        Retrieves information about the specified project.
        A project is the top-level object in the Neon object hierarchy.
        You can obtain a `project_id` by listing the projects for your Neon account.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectRequest, base_url, '/projects/{project_id}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectResponse])
                res.project_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def list_projects(self, request: operations.ListProjectsRequest) -> operations.ListProjectsResponse:
        r"""Get a list of projects
        Retrieves a list of projects for the Neon account.
        A project is the top-level object in the Neon object hierarchy.
        For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/projects'
        headers = {}
        query_params = utils.get_query_params(operations.ListProjectsRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListProjectsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListProjects200ApplicationJSON])
                res.list_projects_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def update_project(self, request: operations.UpdateProjectRequest) -> operations.UpdateProjectResponse:
        r"""Update a project
        Updates the specified project.
        You can obtain a `project_id` by listing the projects for your Neon account.
        Neon permits updating the project name only.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateProjectRequest, base_url, '/projects/{project_id}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "project_update_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectOperations])
                res.project_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    