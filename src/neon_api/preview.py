"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from neon_api.models import operations, shared
from typing import Optional

class Preview:
    r"""New API methods that are in Beta / Preview state and could be subjected to significant changes in the future."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def list_projects_consumption(self, request: operations.ListProjectsConsumptionRequest) -> operations.ListProjectsConsumptionResponse:
        r"""Get a list of projects consumption
        Note, this is a preview API and could be subjected to significant changes in the future.
        Retrieves a list of per-project consumption for the current billing period.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/consumption/projects'
        headers = {}
        query_params = utils.get_query_params(operations.ListProjectsConsumptionRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListProjectsConsumptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListProjectsConsumption200ApplicationJSON])
                res.list_projects_consumption_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    