"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from neon_api import utils
from neon_api.models import operations, shared
from typing import Optional

class Branch:
    r"""These methods allow you to create and manage branches in your Neon project. For related information, see [Manage branches](https://neon.tech/docs/manage/branches)."""
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def create_project_branch(self, request: operations.CreateProjectBranchRequest) -> operations.CreateProjectBranchResponse:
        r"""Create a branch
        Creates a branch in the specified project.
        You can obtain a `project_id` by listing the projects for your Neon account.
        
        This method does not require a request body, but you can specify one to create an endpoint for the branch or to select a non-default parent branch.
        The default behavior is to create a branch from the project's root branch (`main`) with no endpoint, and the branch name is auto-generated.
        For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.CreateProjectBranchRequest, base_url, '/projects/{project_id}/branches', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "branch_create_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProjectBranchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateProjectBranch201ApplicationJSON])
                res.create_project_branch_201_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def create_project_branch_database(self, request: operations.CreateProjectBranchDatabaseRequest) -> operations.CreateProjectBranchDatabaseResponse:
        r"""Create a database
        Creates a database in the specified branch.
        A branch can have multiple databases.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` by listing the project's branches.
        For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.CreateProjectBranchDatabaseRequest, base_url, '/projects/{project_id}/branches/{branch_id}/databases', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "database_create_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProjectBranchDatabaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DatabaseOperations])
                res.database_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def create_project_branch_role(self, request: operations.CreateProjectBranchRoleRequest) -> operations.CreateProjectBranchRoleResponse:
        r"""Create a role
        Creates a role in the specified branch.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` by listing the project's branches.
        In Neon, the terms \"role\" and \"user\" are synonymous.
        For related information, see [Manage users](https://neon.tech/docs/manage/users/).
        
        Connections established to the active read-write endpoint will be dropped.
        If the read-write endpoint is idle, the endpoint becomes active for a short period of time and is suspended afterward.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.CreateProjectBranchRoleRequest, base_url, '/projects/{project_id}/branches/{branch_id}/roles', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "role_create_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProjectBranchRoleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoleOperations])
                res.role_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def delete_project_branch(self, request: operations.DeleteProjectBranchRequest) -> operations.DeleteProjectBranchResponse:
        r"""Delete a branch
        Deletes the specified branch from a project, and places
        all endpoints into an idle state, breaking existing client connections.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain a `branch_id` by listing the project's branches.
        For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
        
        When a successful response status is received, the endpoints are still active,
        and the branch is not yet deleted from storage.
        The deletion occurs after all operations finish.
        You cannot delete a branch if it is the only remaining branch in the project.
        A project must have at least one branch.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteProjectBranchRequest, base_url, '/projects/{project_id}/branches/{branch_id}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProjectBranchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BranchOperations])
                res.branch_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def delete_project_branch_database(self, request: operations.DeleteProjectBranchDatabaseRequest) -> operations.DeleteProjectBranchDatabaseResponse:
        r"""Delete a database
        Deletes the specified database from the branch.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` and `database_name` by listing branch's databases.
        For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteProjectBranchDatabaseRequest, base_url, '/projects/{project_id}/branches/{branch_id}/databases/{database_name}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProjectBranchDatabaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DatabaseOperations])
                res.database_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def delete_project_branch_role(self, request: operations.DeleteProjectBranchRoleRequest) -> operations.DeleteProjectBranchRoleResponse:
        r"""Delete a role
        Deletes the specified role from the branch.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` by listing the project's branches.
        You can obtain the `role_name` by listing the roles for a branch.
        In Neon, the terms \"role\" and \"user\" are synonymous.
        For related information, see [Managing users](https://neon.tech/docs/manage/users/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteProjectBranchRoleRequest, base_url, '/projects/{project_id}/branches/{branch_id}/roles/{role_name}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProjectBranchRoleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoleOperations])
                res.role_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def get_project_branch(self, request: operations.GetProjectBranchRequest) -> operations.GetProjectBranchResponse:
        r"""Get branch details
        Retrieves information about the specified branch.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain a `branch_id` by listing the project's branches.
        A `branch_id` value has a `br-` prefix.
        
        Each Neon project has a root branch named `main`.
        A project may contain child branches that were branched from `main` or from another branch.
        A parent branch is identified by a `parent_id` value, which is the `id` of the parent branch.
        For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectBranchRequest, base_url, '/projects/{project_id}/branches/{branch_id}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectBranchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BranchResponse])
                res.branch_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def get_project_branch_database(self, request: operations.GetProjectBranchDatabaseRequest) -> operations.GetProjectBranchDatabaseResponse:
        r"""Get database details
        Retrieves information about the specified database.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` and `database_name` by listing branch's databases.
        For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectBranchDatabaseRequest, base_url, '/projects/{project_id}/branches/{branch_id}/databases/{database_name}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectBranchDatabaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DatabaseResponse])
                res.database_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def get_project_branch_role(self, request: operations.GetProjectBranchRoleRequest) -> operations.GetProjectBranchRoleResponse:
        r"""Get role details
        Retrieves details about the specified role.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` by listing the project's branches.
        You can obtain the `role_name` by listing the roles for a branch.
        In Neon, the terms \"role\" and \"user\" are synonymous.
        For related information, see [Managing users](https://neon.tech/docs/manage/users/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectBranchRoleRequest, base_url, '/projects/{project_id}/branches/{branch_id}/roles/{role_name}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectBranchRoleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoleResponse])
                res.role_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def get_project_branch_role_password(self, request: operations.GetProjectBranchRolePasswordRequest) -> operations.GetProjectBranchRolePasswordResponse:
        r"""Get role password
        Retrieves password of the specified role if possible.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` by listing the project's branches.
        You can obtain the `role_name` by listing the roles for a branch.
        In Neon, the terms \"role\" and \"user\" are synonymous.
        For related information, see [Managing users](https://neon.tech/docs/manage/users/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectBranchRolePasswordRequest, base_url, '/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reveal_password', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectBranchRolePasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RolePasswordResponse])
                res.role_password_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def list_project_branch_databases(self, request: operations.ListProjectBranchDatabasesRequest) -> operations.ListProjectBranchDatabasesResponse:
        r"""Get a list of databases
        Retrieves a list of databases for the specified branch.
        A branch can have multiple databases.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` by listing the project's branches.
        For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.ListProjectBranchDatabasesRequest, base_url, '/projects/{project_id}/branches/{branch_id}/databases', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListProjectBranchDatabasesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DatabasesResponse])
                res.databases_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def list_project_branch_endpoints(self, request: operations.ListProjectBranchEndpointsRequest) -> operations.ListProjectBranchEndpointsResponse:
        r"""Get a list of branch endpoints
        Retrieves a list of endpoints for the specified branch.
        Currently, Neon permits only one endpoint per branch.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` by listing the project's branches.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.ListProjectBranchEndpointsRequest, base_url, '/projects/{project_id}/branches/{branch_id}/endpoints', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListProjectBranchEndpointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EndpointsResponse])
                res.endpoints_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def list_project_branch_roles(self, request: operations.ListProjectBranchRolesRequest) -> operations.ListProjectBranchRolesResponse:
        r"""Get a list of roles
        Retrieves a list of roles from the specified branch.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` by listing the project's branches.
        In Neon, the terms \"role\" and \"user\" are synonymous.
        For related information, see [Manage users](https://neon.tech/docs/manage/users/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.ListProjectBranchRolesRequest, base_url, '/projects/{project_id}/branches/{branch_id}/roles', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListProjectBranchRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RolesResponse])
                res.roles_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def list_project_branches(self, request: operations.ListProjectBranchesRequest) -> operations.ListProjectBranchesResponse:
        r"""Get a list of branches
        Retrieves a list of branches for the specified project.
        You can obtain a `project_id` by listing the projects for your Neon account.
        
        Each Neon project has a root branch named `main`.
        A `branch_id` value has a `br-` prefix.
        A project may contain child branches that were branched from `main` or from another branch.
        A parent branch is identified by the `parent_id` value, which is the `id` of the parent branch.
        For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.ListProjectBranchesRequest, base_url, '/projects/{project_id}/branches', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListProjectBranchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BranchesResponse])
                res.branches_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def reset_project_branch_role_password(self, request: operations.ResetProjectBranchRolePasswordRequest) -> operations.ResetProjectBranchRolePasswordResponse:
        r"""Reset the role password
        Resets the password for the specified role.
        Returns a new password and operations. The new password is ready to use when the last operation finishes.
        The old password remains valid until last operation finishes.
        Connections to the read-write endpoint are dropped. If idle,
        the read-write endpoint becomes active for a short period of time.
        
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` by listing the project's branches.
        You can obtain the `role_name` by listing the roles for a branch.
        In Neon, the terms \"role\" and \"user\" are synonymous.
        For related information, see [Managing users](https://neon.tech/docs/manage/users/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.ResetProjectBranchRolePasswordRequest, base_url, '/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reset_password', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetProjectBranchRolePasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoleOperations])
                res.role_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def set_primary_project_branch(self, request: operations.SetPrimaryProjectBranchRequest) -> operations.SetPrimaryProjectBranchResponse:
        r"""Set the branch as the primary branch of a project
        The primary mark is automatically removed from the previous primary branch.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` by listing the project's branches.
        For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.SetPrimaryProjectBranchRequest, base_url, '/projects/{project_id}/branches/{branch_id}/set_as_primary', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetPrimaryProjectBranchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BranchOperations])
                res.branch_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def update_project_branch(self, request: operations.UpdateProjectBranchRequest) -> operations.UpdateProjectBranchResponse:
        r"""Update a branch
        Updates the specified branch. Only changing the branch name is supported.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` by listing the project's branches.
        For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.UpdateProjectBranchRequest, base_url, '/projects/{project_id}/branches/{branch_id}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "branch_update_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateProjectBranchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BranchOperations])
                res.branch_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def update_project_branch_database(self, request: operations.UpdateProjectBranchDatabaseRequest) -> operations.UpdateProjectBranchDatabaseResponse:
        r"""Update a database
        Updates the specified database in the branch.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain the `branch_id` and `database_name` by listing the branch's databases.
        For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.UpdateProjectBranchDatabaseRequest, base_url, '/projects/{project_id}/branches/{branch_id}/databases/{database_name}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "database_update_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateProjectBranchDatabaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DatabaseOperations])
                res.database_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    