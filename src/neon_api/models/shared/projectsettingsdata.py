"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import projectquota as shared_projectquota
from dataclasses_json import Undefined, dataclass_json
from neon_api import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ProjectSettingsData:
    quota: Optional[shared_projectquota.ProjectQuota] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quota'), 'exclude': lambda f: f is None }})
    r"""Per-project consumption quota. If quota is exceeded, then all active computes
    will be automatically suspended and it won't be possible to start them neither
    with API method call or with incoming proxy connections. The only exception is
    `logical_size_bytes`, which is applied on per-branch basis, i.e. only compute
    on the branch with `logical_size` exceeding quota will be suspended.
    
    Quotas are enforced based on per-project consumption metrics with the same names,
    which are reset at the end of each billing period (first day of the month).
    Logical size is also an exception here, as it represents the total size of data
    stored in some branch, so it's not reset.
    
    Zero quota value or empty mean 'unlimited'.
    """
    

