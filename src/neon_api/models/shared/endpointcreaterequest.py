"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import endpointpoolermode as shared_endpointpoolermode
from ..shared import endpointsettingsdata as shared_endpointsettingsdata
from ..shared import endpointtype as shared_endpointtype
from ..shared import provisioner as shared_provisioner
from dataclasses_json import Undefined, dataclass_json
from neon_api import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EndpointCreateRequestEndpoint:
    
    branch_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch_id') }})
    r"""The ID of the branch the compute endpoint will be associated with"""
    type: shared_endpointtype.EndpointType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The compute endpoint type. Either `read_write` or `read_only`.
    The `read_only` compute endpoint type is not yet supported.
    """
    autoscaling_limit_max_cu: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoscaling_limit_max_cu'), 'exclude': lambda f: f is None }})
    autoscaling_limit_min_cu: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoscaling_limit_min_cu'), 'exclude': lambda f: f is None }})
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled'), 'exclude': lambda f: f is None }})
    r"""Whether to restrict connections to the compute endpoint"""
    passwordless_access: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordless_access'), 'exclude': lambda f: f is None }})
    r"""NOT YET IMPLEMENTED. Whether to permit passwordless access to the compute endpoint."""
    pooler_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pooler_enabled'), 'exclude': lambda f: f is None }})
    r"""Whether to enable connection pooling for the compute endpoint"""
    pooler_mode: Optional[shared_endpointpoolermode.EndpointPoolerMode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pooler_mode'), 'exclude': lambda f: f is None }})
    r"""The connection pooler mode. Neon supports PgBouncer in `transaction` mode only."""
    provisioner: Optional[shared_provisioner.Provisioner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioner'), 'exclude': lambda f: f is None }})
    r"""The Neon compute provisioner."""
    region_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region_id'), 'exclude': lambda f: f is None }})
    r"""The region where the compute endpoint will be created. Only the project's `region_id` is permitted."""
    settings: Optional[shared_endpointsettingsdata.EndpointSettingsData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})
    r"""A collection of settings for a compute endpoint"""
    suspend_timeout_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspend_timeout_seconds'), 'exclude': lambda f: f is None }})
    r"""Duration of inactivity in seconds after which endpoint will be
    automatically suspended. Value `0` means use global default,
    `-1` means never suspend. Maximum value is 1 week in seconds.
    """
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EndpointCreateRequest:
    
    endpoint: EndpointCreateRequestEndpoint = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpoint') }})
    