"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import defaultendpointsettings as shared_defaultendpointsettings
from ..shared import projectownerdata as shared_projectownerdata
from ..shared import projectsettingsdata as shared_projectsettingsdata
from ..shared import provisioner as shared_provisioner
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from neon_api import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectListItem:
    r"""Essential data about the project. Full data is available at the getProject endpoint."""
    
    active_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active_time') }})
    r"""Control plane observed endpoints of this project being active this amount of wall-clock time."""
    branch_logical_size_limit: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch_logical_size_limit') }})
    r"""The logical size limit for a branch. The value is in MiB."""
    branch_logical_size_limit_bytes: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch_logical_size_limit_bytes') }})
    r"""The logical size limit for a branch. The value is in B."""
    cpu_used_sec: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpu_used_sec') }})
    r"""DEPRECATED, use data from the getProject endpoint instead."""
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""A timestamp indicating when the project was created"""
    creation_source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creation_source') }})
    r"""The project creation source"""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The project ID"""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The project name"""
    owner_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_id') }})
    pg_version: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pg_version') }})
    r"""The major PostgreSQL version number. Currently supported version are `14` and `15`."""
    platform_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform_id') }})
    r"""The cloud platform identifier. Currently, only AWS is supported, for which the identifier is `aws`."""
    provisioner: shared_provisioner.Provisioner = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioner') }})
    r"""The Neon compute provisioner."""
    proxy_host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxy_host') }})
    r"""The proxy host for the project. This value combines the `region_id`, the `platform_id`, and the Neon domain (`neon.tech`)."""
    region_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region_id') }})
    r"""The region identifier"""
    store_passwords: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('store_passwords') }})
    r"""Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization."""
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""A timestamp indicating when the project was last updated"""
    default_endpoint_settings: Optional[shared_defaultendpointsettings.DefaultEndpointSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_endpoint_settings'), 'exclude': lambda f: f is None }})
    r"""A collection of settings for a Neon endpoint"""
    maintenance_starts_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintenance_starts_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""A timestamp indicating when project maintenance begins. If set, the project is placed into maintenance mode at this time."""
    owner: Optional[shared_projectownerdata.ProjectOwnerData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})
    quota_reset_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quota_reset_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED. Use `consumption_period_end` from the getProject endpoint instead.
    A timestamp indicating when the project quota resets
    """
    settings: Optional[shared_projectsettingsdata.ProjectSettingsData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})
    synthetic_storage_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('synthetic_storage_size'), 'exclude': lambda f: f is None }})
    r"""Experimental. Do not use this field yet.
    The data storage size in bytes.
    """
    