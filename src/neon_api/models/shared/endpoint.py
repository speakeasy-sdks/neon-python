"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import endpointpoolermode as shared_endpointpoolermode
from ..shared import endpointsettingsdata as shared_endpointsettingsdata
from ..shared import endpointstate as shared_endpointstate
from ..shared import endpointtype as shared_endpointtype
from ..shared import provisioner as shared_provisioner
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from neon_api import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Endpoint:
    
    autoscaling_limit_max_cu: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoscaling_limit_max_cu') }})
    autoscaling_limit_min_cu: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoscaling_limit_min_cu') }})
    branch_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch_id') }})
    r"""The ID of the branch that the compute endpoint is associated with"""
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""A timestamp indicating when the compute endpoint was created"""
    creation_source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creation_source') }})
    r"""The compute endpoint creation source"""
    current_state: shared_endpointstate.EndpointState = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_state') }})
    r"""The state of the compute endpoint"""
    disabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled') }})
    r"""Whether to restrict connections to the compute endpoint"""
    host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host') }})
    r"""The hostname of the compute endpoint. This is the hostname specified when connecting to a Neon database."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The compute endpoint ID. Compute endpoint IDs have an `ep-` prefix. For example: `ep-little-smoke-851426`"""
    passwordless_access: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordless_access') }})
    r"""Whether to permit passwordless access to the compute endpoint"""
    pooler_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pooler_enabled') }})
    r"""Whether connection pooling is enabled for the compute endpoint"""
    pooler_mode: shared_endpointpoolermode.EndpointPoolerMode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pooler_mode') }})
    r"""The connection pooler mode. Neon supports PgBouncer in `transaction` mode only."""
    project_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project_id') }})
    r"""The ID of the project to which the compute endpoint belongs"""
    provisioner: shared_provisioner.Provisioner = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioner') }})
    r"""The Neon compute provisioner."""
    proxy_host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxy_host') }})
    r"""DEPRECATED. Use the \\"host\\" property instead."""
    region_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region_id') }})
    r"""The region identifier"""
    settings: shared_endpointsettingsdata.EndpointSettingsData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings') }})
    r"""A collection of settings for a compute endpoint"""
    suspend_timeout_seconds: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspend_timeout_seconds') }})
    r"""Duration of inactivity in seconds after which endpoint will be
    automatically suspended. Value `0` means use global default,
    `-1` means never suspend. Maximum value is 1 week in seconds.
    """
    type: shared_endpointtype.EndpointType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The compute endpoint type. Either `read_write` or `read_only`.
    The `read_only` compute endpoint type is not yet supported.
    """
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""A timestamp indicating when the compute endpoint was last updated"""
    last_active: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_active'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""A timestamp indicating when the compute endpoint was last active"""
    pending_state: Optional[shared_endpointstate.EndpointState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pending_state'), 'exclude': lambda f: f is None }})
    r"""The state of the compute endpoint"""
    