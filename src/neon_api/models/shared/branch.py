"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import branchstate as shared_branchstate
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from neon_api import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Branch:
    
    active_time_seconds: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active_time_seconds') }})
    compute_time_seconds: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compute_time_seconds') }})
    cpu_used_sec: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpu_used_sec') }})
    r"""CPU seconds used by all the endpoints of the branch, including deleted ones.
    This value is reset at the beginning of each billing period.
    Examples:
    1. A branch that uses 1 CPU for 1 second is equal to `cpu_used_sec=1`.
    2. A branch that uses 2 CPUs simultaneously for 1 second is equal to `cpu_used_sec=2`.
    """
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""A timestamp indicating when the branch was created"""
    creation_source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creation_source') }})
    r"""The branch creation source"""
    current_state: shared_branchstate.BranchState = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_state') }})
    r"""The branch state"""
    data_transfer_bytes: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_transfer_bytes') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The branch ID. This value is generated when a branch is created. A `branch_id` value has a `br` prefix. For example: `br-small-term-683261`."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The branch name"""
    primary: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary') }})
    r"""Whether the branch is the project's primary branch"""
    project_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project_id') }})
    r"""The ID of the project to which the branch belongs"""
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""A timestamp indicating when the branch was last updated"""
    written_data_bytes: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('written_data_bytes') }})
    logical_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logical_size'), 'exclude': lambda f: f is None }})
    r"""The logical size of the branch, in bytes"""
    parent_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_id'), 'exclude': lambda f: f is None }})
    r"""The `branch_id` of the parent branch"""
    parent_lsn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_lsn'), 'exclude': lambda f: f is None }})
    r"""The Log Sequence Number (LSN) on the parent branch from which this branch was created"""
    parent_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The point in time on the parent branch from which this branch was created"""
    pending_state: Optional[shared_branchstate.BranchState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pending_state'), 'exclude': lambda f: f is None }})
    r"""The branch state"""
    