"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import projectsettingsdata as shared_projectsettingsdata
from ..shared import provisioner as shared_provisioner
from dataclasses_json import Undefined, dataclass_json
from neon_api import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectCreateRequestProjectBranch:
    
    database_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('database_name'), 'exclude': lambda f: f is None }})
    r"""The database name. If not specified, the default database name will be used."""
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The branch name. If not specified, the default branch name will be used."""
    role_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role_name'), 'exclude': lambda f: f is None }})
    r"""The role name. If not specified, the default role name will be used."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectCreateRequestProject:
    
    autoscaling_limit_max_cu: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoscaling_limit_max_cu'), 'exclude': lambda f: f is None }})
    autoscaling_limit_min_cu: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoscaling_limit_min_cu'), 'exclude': lambda f: f is None }})
    branch: Optional[ProjectCreateRequestProjectBranch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch'), 'exclude': lambda f: f is None }})
    default_endpoint_settings: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_endpoint_settings'), 'exclude': lambda f: f is None }})
    r"""A raw representation of PostgreSQL settings"""
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The project name"""
    pg_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pg_version'), 'exclude': lambda f: f is None }})
    r"""The major PostgreSQL version number. Currently supported version are `14` and `15`."""
    provisioner: Optional[shared_provisioner.Provisioner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioner'), 'exclude': lambda f: f is None }})
    r"""The Neon compute provisioner."""
    region_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region_id'), 'exclude': lambda f: f is None }})
    r"""The region identifier. See [the documentation](https://neon.tech/docs/introduction/regions) for the list of supported regions."""
    settings: Optional[shared_projectsettingsdata.ProjectSettingsData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})
    store_passwords: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('store_passwords'), 'exclude': lambda f: f is None }})
    r"""Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectCreateRequest:
    
    project: ProjectCreateRequestProject = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project') }})
    