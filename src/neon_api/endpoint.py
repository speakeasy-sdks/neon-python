"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from neon_api import utils
from neon_api.models import operations, shared
from typing import Optional

class Endpoint:
    r"""These methods allow you to create and manage compute endpoints in your Neon project. For related information, see [Manage compute endpoints](https://neon.tech/docs/manage/endpoints)."""
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def create_project_endpoint(self, request: operations.CreateProjectEndpointRequest) -> operations.CreateProjectEndpointResponse:
        r"""Create an endpoint
        Creates an endpoint for the specified branch.
        An endpoint is a Neon compute instance.
        There is a maximum of one endpoint per branch.
        If the specified branch already has an endpoint, the operation fails.
        
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain `branch_id` by listing the project's branches.
        A `branch_id` has a `br-` prefix.
        Currently, only the `read_write` endpoint type is supported.
        For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
        For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.CreateProjectEndpointRequest, base_url, '/projects/{project_id}/endpoints', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "endpoint_create_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProjectEndpointResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EndpointOperations])
                res.endpoint_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def delete_project_endpoint(self, request: operations.DeleteProjectEndpointRequest) -> operations.DeleteProjectEndpointResponse:
        r"""Delete an endpoint
        Delete the specified endpoint.
        An endpoint is a Neon compute instance.
        Deleting an endpoint drops existing network connections to the endpoint.
        The deletion is completed when last operation in the chain finishes successfully.
        
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain an `endpoint_id` by listing your project's endpoints.
        An `endpoint_id` has an `ep-` prefix.
        For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteProjectEndpointRequest, base_url, '/projects/{project_id}/endpoints/{endpoint_id}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProjectEndpointResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EndpointOperations])
                res.endpoint_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def get_project_endpoint(self, request: operations.GetProjectEndpointRequest) -> operations.GetProjectEndpointResponse:
        r"""Get an endpoint
        Retrieves information about the specified endpoint.
        An endpoint is a Neon compute instance.
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain an `endpoint_id` by listing your project's endpoints.
        An `endpoint_id` has an `ep-` prefix.
        For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectEndpointRequest, base_url, '/projects/{project_id}/endpoints/{endpoint_id}', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectEndpointResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EndpointResponse])
                res.endpoint_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def list_project_endpoints(self, request: operations.ListProjectEndpointsRequest) -> operations.ListProjectEndpointsResponse:
        r"""Get a list of endpoints
        Retrieves a list of endpoints for the specified project.
        An endpoint is a Neon compute instance.
        You can obtain a `project_id` by listing the projects for your Neon account.
        For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.ListProjectEndpointsRequest, base_url, '/projects/{project_id}/endpoints', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListProjectEndpointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EndpointsResponse])
                res.endpoints_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def start_project_endpoint(self, request: operations.StartProjectEndpointRequest) -> operations.StartProjectEndpointResponse:
        r"""Start an endpoint
        Starts an endpoint. The endpoint is ready to use
        after the last operation in chain finishes successfully.
        
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain an `endpoint_id` by listing your project's endpoints.
        An `endpoint_id` has an `ep-` prefix.
        For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.StartProjectEndpointRequest, base_url, '/projects/{project_id}/endpoints/{endpoint_id}/start', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StartProjectEndpointResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EndpointOperations])
                res.endpoint_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def suspend_project_endpoint(self, request: operations.SuspendProjectEndpointRequest) -> operations.SuspendProjectEndpointResponse:
        r"""Suspend an endpoint
        Suspend the specified endpoint
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain an `endpoint_id` by listing your project's endpoints.
        An `endpoint_id` has an `ep-` prefix.
        For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.SuspendProjectEndpointRequest, base_url, '/projects/{project_id}/endpoints/{endpoint_id}/suspend', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuspendProjectEndpointResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EndpointOperations])
                res.endpoint_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    
    def update_project_endpoint(self, request: operations.UpdateProjectEndpointRequest) -> operations.UpdateProjectEndpointResponse:
        r"""Update an endpoint
        Updates the specified endpoint. Currently, only changing the associated branch is supported.
        The branch that you specify cannot have an existing endpoint.
        
        You can obtain a `project_id` by listing the projects for your Neon account.
        You can obtain an `endpoint_id` and `branch_id` by listing your project's endpoints.
        An `endpoint_id` has an `ep-` prefix. A `branch_id` has a `br-` prefix.
        For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
        
        If the returned list of operations is not empty, the endpoint is not ready to use.
        The client must wait for the last operation to finish before using the endpoint.
        If the endpoint was idle before the update, the endpoint becomes active for a short period of time,
        and the control plane suspends it again after the update.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.UpdateProjectEndpointRequest, base_url, '/projects/{project_id}/endpoints/{endpoint_id}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "endpoint_update_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateProjectEndpointResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EndpointOperations])
                res.endpoint_operations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralError])
                res.general_error = out

        return res

    